import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class ATMSystem {
    private static List<Account> accounts = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);
    private static Account currentAccount;

    public static void main(String[] args) {
        initializeAccounts();

        System.out.println("Welcome to the ATM system!");
        System.out.print("Enter User ID: ");
        String userID = scanner.nextLine();
        System.out.print("Enter PIN: ");
        String pin = scanner.nextLine();

        if (authenticateUser(userID, pin)) {
            displayMainMenu();
        } else {
            System.out.println("Invalid credentials. Exiting the system.");
        }
    }

    private static void initializeAccounts() {
        // Add some dummy accounts for testing
        accounts.add(new Account("123456", "0000", "John Roy", 5000));
        accounts.add(new Account("987654", "1111", "Jane Smith", 3000));
        accounts.add(new Account("012345", "2222", "Joni", 8000));
    }

    private static boolean authenticateUser(String userID, String pin) {
        for (Account account : accounts) {
            if (account.getUserID().equals(userID) && account.getPin().equals(pin)) {
                currentAccount = account;
                return true;
            }
        }
        return false;
    }

    private static void displayMainMenu() {
        int choice = 0;
        while (choice != 5) {
            System.out.println("\nMain Menu");
            System.out.println("1. Transactions History");
            System.out.println("2. Withdraw");
            System.out.println("3. Deposit");
            System.out.println("4. Transfer");
            System.out.println("5. Quit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine(); // Clear the input buffer

            switch (choice) {
                case 1:
                    displayTransactionHistory();
                    break;
                case 2:
                    performWithdrawal();
                    break;
                case 3:
                    performDeposit();
                    break;
                case 4:
                    performTransfer();
                    break;
                case 5:
                    System.out.println("Thank you for using the ATM system. Goodbye!");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void displayTransactionHistory() {
        System.out.println("\nTransaction History:");
        List<String> history = currentAccount.getTransactionHistory();
        if (history.isEmpty()) {
            System.out.println("No transaction history available.");
        } else {
            for (String transaction : history) {
                System.out.println(transaction);
            }
        }
    }

    private static void performWithdrawal() {
        System.out.print("Enter the withdrawal amount: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // Clear the input buffer

        if (currentAccount.withdraw(amount)) {
            System.out.println("Withdrawal successful.");
            currentAccount.addTransaction("Withdrawal: -$" + amount);
        } else {
            System.out.println("Insufficient balance. Withdrawal failed.");
        }
    }

    private static void performDeposit() {
        System.out.print("Enter the deposit amount: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // Clear the input buffer

        currentAccount.deposit(amount);
        System.out.println("Deposit successful.");
        currentAccount.addTransaction("Deposit: +$" + amount);
    }

    private static void performTransfer() {
        System.out.print("Enter the account number to transfer funds: ");
        String accountNumber = scanner.nextLine();
        System.out.print("Enter the transfer amount: ");
        double amount = scanner.nextDouble();
        		scanner.nextLine(); // Clear the input buffer

        Account recipientAccount = findAccountByNumber(accountNumber);
        if (recipientAccount != null) {
            System.out.println("Transfer to Account: " + recipientAccount.getAccountNumber());
            if (currentAccount.transfer(recipientAccount, amount)) {
                System.out.println("Transfer successful.");
                currentAccount.addTransaction("Transfer: -$" + amount + " to Account: " + recipientAccount.getAccountNumber());
                recipientAccount.addTransaction("Transfer: +$" + amount + " from Account: " + currentAccount.getAccountNumber());
            } else {
                System.out.println("Insufficient balance. Transfer failed.");
            }
        } else {
            System.out.println("Invalid account number. Transfer failed.");
        }
    }

    private static Account findAccountByNumber(String accountNumber) {
        for (Account account : accounts) {
            if (account.getAccountNumber().equals(accountNumber)) {
                return account;
            }
        }
        return null;
    }
}

class Account {
    private String accountNumber;
    private String pin;
    private String holderName;
    private double balance;
    private List<String> transactionHistory;

    public Account(String accountNumber, String pin, String holderName, double balance) {
        this.accountNumber = accountNumber;
        this.pin = pin;
        this.holderName = holderName;
        this.balance = balance;
        this.transactionHistory = new ArrayList<>();
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public String getPin() {
        return pin;
    }

    public List<String> getTransactionHistory() {
        return transactionHistory;
    }

    public boolean withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
            return true;
        }
        return false;
    }

    public void deposit(double amount) {
        balance += amount;
    }

    public boolean transfer(Account recipient, double amount) {
        if (balance >= amount) {
            withdraw(amount);
            recipient.deposit(amount);
            return true;
        }
        return false;
    }

    public void addTransaction(String transaction) {
        transactionHistory.add(transaction);
    }

    public String getUserID() {
        return accountNumber;
    }
}

   class ATMSystem1{
    public static void main(String[] args) {
        ATMSystem.main(args);
    }
}		
        		
        		
        		
        		